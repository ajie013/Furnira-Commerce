// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User{
  userId String @id @default(uuid())
  username String @unique
  firstName String 
  lastName String
  email String @unique
  password String
  role String
  phoneNumber String @unique
  isArchive Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cart      ShoppingCart? @relation("UserCart")
  Order Order[] @relation()
}

model Category{
  categoryId String @id @default(uuid())
  name String @unique
  product Product[] @relation()
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product{
  productId String @id @default(uuid())
  name String
  price Decimal @db.Decimal(8,2)
  image String?
  stock Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isArchive Boolean
  Category Category @relation(fields: [categoryId], references: [categoryId])
  categoryId String
  cartItems   CartItem[] @relation()
  OrderItem OrderItem[]
}

model ShoppingCart {
  shoppingCartId String      @id @default(uuid())
  user           User        @relation(fields: [userId], references: [userId], name: "UserCart")
  userId         String      @unique
  quantity       Int        
  totalAmount    Decimal     @db.Decimal(10, 2)
  cartItems      CartItem[] @relation()
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

model CartItem {
  cartItemId String        @id @default(uuid())
  cart       ShoppingCart  @relation(fields: [cartId], references: [shoppingCartId])
  cartId     String
  product    Product       @relation(fields: [productId], references: [productId])
  productId  String
  quantity   Int          
  price      Decimal       @db.Decimal(10, 2)
  
}

model Order {
  orderId     String       @id @default(uuid())
  user        User         @relation(fields: [userId], references: [userId])
  userId      String
  totalAmount Decimal      @db.Decimal(10, 2)
  status      String       // e.g., 'Pending', 'Shipped', 'Delivered'
  createdAt   DateTime     @default(now())
  orderItems  OrderItem[]
}

model OrderItem {
  orderItemId String   @id @default(uuid())
  order       Order    @relation(fields: [orderId], references: [orderId])
  orderId     String
  product     Product  @relation(fields: [productId], references: [productId])
  productId   String
  quantity    Int
  price       Decimal  @db.Decimal(10, 2)
}

